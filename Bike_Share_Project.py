{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0fc48c71",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello! Let's explore some US bikeshare data!\n",
      "\n",
      "kindly make sure to type your choice like below\n",
      "\"chicago\", \"new york\", \"washington\"\n",
      "kindly type the name of the city, please : chicago\n",
      " you've typed chicago\n",
      "########################################\n",
      "kindly make sure to type your choice like below to avoid misstyping \n",
      "\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"all\"\n",
      "kindly type the name of the month or all, please : may\n",
      "you've typed may\n",
      "########################################\n",
      "kindly make sure to type your choice like below to avoid misstyping \n",
      "\"saturday\", \"sunday\", \"monday\" , \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"all\"\n",
      "kindly type the name of the day or all, please : monday\n",
      "you've typed monday\n",
      "########################################\n",
      "----------------------------------------\n",
      "\n",
      "Calculating The Most Frequent Times of Travel...\n",
      "\n",
      "the most common month is:- 5\n",
      "The Most Common Day Is:- Monday.\n",
      "the most common start hour is:- 17.\n",
      "\n",
      "This took 0.017002344131469727 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating The Most Popular Stations and Trip...\n",
      "\n",
      "the common start station used in city is:- Streeter Dr & Grand Ave.\n",
      "the common end station used in city is:- Streeter Dr & Grand Ave.\n",
      "the most Combination Station used in city is:- From (Lake Shore Dr & Monroe St) To (Streeter Dr & Grand Ave)..\n",
      "\n",
      "This took 0.0410008430480957 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating Trip Duration...\n",
      "\n",
      "the total drive time is:- 12697151.\n",
      "the mean travel is:- 1051.0886589403974.\n",
      "\n",
      "This took 0.0029942989349365234 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating User Stats...\n",
      "\n",
      "the user type in this city is:-\n",
      " Subscriber    8962\n",
      "Customer      3118\n",
      "Name: User Type, dtype: int64.\n",
      "the user type in this city is:-\n",
      " Male      6717\n",
      "Female    2246\n",
      "Name: Gender, dtype: int64.\n",
      "the earliest person born in  1906 .\n",
      "########################################\n",
      "the most recent person born in 2001.\n",
      "########################################\n",
      "in this city data of birth year not exist.\n",
      "\n",
      "This took 0.011997222900390625 seconds.\n",
      "----------------------------------------\n",
      "Do you like to display other data?(yes/no). Yes\n",
      "        Unnamed: 0          Start Time             End Time  Trip Duration  \\\n",
      "15989      1009203 2017-05-29 16:06:26  2017-05-29 17:17:08           4242   \n",
      "299073      928977 2017-05-22 20:32:14  2017-05-22 20:42:02            588   \n",
      "203198      703437 2017-05-01 12:02:58  2017-05-01 12:13:35            637   \n",
      "238313     1003348 2017-05-29 12:41:46  2017-05-29 13:04:06           1340   \n",
      "160616     1006198 2017-05-29 14:21:44  2017-05-29 15:27:57           3973   \n",
      "\n",
      "                       Start Station                      End Station  \\\n",
      "15989        Lake Shore Dr & Ohio St          Lake Shore Dr & Ohio St   \n",
      "299073     Wabash Ave & Roosevelt Rd            Calumet Ave & 21st St   \n",
      "203198     Wacker Dr & Washington St           State St & Harrison St   \n",
      "238313  Humboldt Blvd & Armitage Ave       Kedzie Ave & Milwaukee Ave   \n",
      "160616         Michigan Ave & Oak St  Lakefront Trail & Bryn Mawr Ave   \n",
      "\n",
      "         User Type  Gender  Birth Year  month     day  hour  \\\n",
      "15989     Customer     NaN         NaN      5  Monday    16   \n",
      "299073  Subscriber    Male      1963.0      5  Monday    20   \n",
      "203198  Subscriber  Female      1968.0      5  Monday    12   \n",
      "238313  Subscriber  Female      1992.0      5  Monday    12   \n",
      "160616    Customer     NaN         NaN      5  Monday    14   \n",
      "\n",
      "                                      combination_station  \n",
      "15989   From (Lake Shore Dr & Ohio St) To (Lake Shore ...  \n",
      "299073  From (Wabash Ave & Roosevelt Rd) To (Calumet A...  \n",
      "203198  From (Wacker Dr & Washington St) To (State St ...  \n",
      "238313  From (Humboldt Blvd & Armitage Ave) To (Kedzie...  \n",
      "160616  From (Michigan Ave & Oak St) To (Lakefront Tra...  \n",
      "Do you like to pursue showing other data?(yes/no). yes\n",
      "        Unnamed: 0          Start Time             End Time  Trip Duration  \\\n",
      "251274      916360 2017-05-22 07:34:40  2017-05-22 07:49:31            891   \n",
      "5626        918704 2017-05-22 09:43:17  2017-05-22 09:48:02            285   \n",
      "149338      839306 2017-05-15 13:01:42  2017-05-15 13:23:23           1301   \n",
      "271225      920689 2017-05-22 12:52:55  2017-05-22 13:11:00           1085   \n",
      "34964       918770 2017-05-22 09:50:04  2017-05-22 10:46:22           3378   \n",
      "\n",
      "                       Start Station                     End Station  \\\n",
      "251274   Lincoln Ave & Fullerton Ave          St. Clair St & Erie St   \n",
      "5626        Lincoln Ave & Addison St    Ashland Ave & Wellington Ave   \n",
      "149338  Woodlawn Ave & Lake Park Ave  Museum of Science and Industry   \n",
      "271225    Lake Shore Dr & North Blvd         Streeter Dr & Grand Ave   \n",
      "34964     Lake Shore Dr & North Blvd         Streeter Dr & Grand Ave   \n",
      "\n",
      "         User Type Gender  Birth Year  month     day  hour  \\\n",
      "251274  Subscriber   Male      1987.0      5  Monday     7   \n",
      "5626    Subscriber   Male      1979.0      5  Monday     9   \n",
      "149338    Customer    NaN         NaN      5  Monday    13   \n",
      "271225    Customer    NaN         NaN      5  Monday    12   \n",
      "34964     Customer    NaN         NaN      5  Monday     9   \n",
      "\n",
      "                                      combination_station  \n",
      "251274  From (Lincoln Ave & Fullerton Ave) To (St. Cla...  \n",
      "5626    From (Lincoln Ave & Addison St) To (Ashland Av...  \n",
      "149338  From (Woodlawn Ave & Lake Park Ave) To (Museum...  \n",
      "271225  From (Lake Shore Dr & North Blvd) To (Streeter...  \n",
      "34964   From (Lake Shore Dr & North Blvd) To (Streeter...  \n",
      "Do you like to pursue showing other data?(yes/no). yes\n",
      "        Unnamed: 0          Start Time             End Time  Trip Duration  \\\n",
      "227524      928189 2017-05-22 19:13:04  2017-05-22 19:22:40            576   \n",
      "204573     1007743 2017-05-29 15:15:01  2017-05-29 15:22:26            445   \n",
      "59155       763766 2017-05-08 17:19:04  2017-05-08 17:34:11            907   \n",
      "253418     1013751 2017-05-29 19:19:47  2017-05-29 19:31:39            712   \n",
      "7682        836587 2017-05-15 08:41:59  2017-05-15 08:50:56            537   \n",
      "\n",
      "                            Start Station                   End Station  \\\n",
      "227524             Wabash Ave & Grand Ave  Clinton St & Washington Blvd   \n",
      "204573      Ravenswood Ave & Lawrence Ave      Western Ave & Leland Ave   \n",
      "59155           Franklin St & Chicago Ave    Hampden Ct & Diversey Pkwy   \n",
      "253418         Halsted St & Diversey Pkwy        Broadway & Sheridan Rd   \n",
      "7682    Sangamon St & Washington Blvd (*)      Kingsbury St & Kinzie St   \n",
      "\n",
      "         User Type  Gender  Birth Year  month     day  hour  \\\n",
      "227524  Subscriber    Male      1988.0      5  Monday    19   \n",
      "204573  Subscriber    Male      1990.0      5  Monday    15   \n",
      "59155   Subscriber    Male      1984.0      5  Monday    17   \n",
      "253418    Customer     NaN         NaN      5  Monday    19   \n",
      "7682    Subscriber  Female      1987.0      5  Monday     8   \n",
      "\n",
      "                                      combination_station  \n",
      "227524  From (Wabash Ave & Grand Ave) To (Clinton St &...  \n",
      "204573  From (Ravenswood Ave & Lawrence Ave) To (Weste...  \n",
      "59155   From (Franklin St & Chicago Ave) To (Hampden C...  \n",
      "253418  From (Halsted St & Diversey Pkwy) To (Broadway...  \n",
      "7682    From (Sangamon St & Washington Blvd (*)) To (K...  \n",
      "Do you like to pursue showing other data?(yes/no). no\n",
      "thank you for using bikeshare data\n",
      "\n",
      "Would you like to restart? Enter yes or no.\n",
      "yes\n",
      "Hello! Let's explore some US bikeshare data!\n",
      "\n",
      "kindly make sure to type your choice like below\n",
      "\"chicago\", \"new york\", \"washington\"\n",
      "kindly type the name of the city, please : new york\n",
      " you've typed new york\n",
      "########################################\n",
      "kindly make sure to type your choice like below to avoid misstyping \n",
      "\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"all\"\n",
      "kindly type the name of the month or all, please : all\n",
      "you've typed all\n",
      "########################################\n",
      "kindly make sure to type your choice like below to avoid misstyping \n",
      "\"saturday\", \"sunday\", \"monday\" , \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"all\"\n",
      "kindly type the name of the day or all, please : all\n",
      "you've typed all\n",
      "########################################\n",
      "----------------------------------------\n",
      "\n",
      "Calculating The Most Frequent Times of Travel...\n",
      "\n",
      "the most common month is:- 6\n",
      "The Most Common Day Is:- Wednesday.\n",
      "the most common start hour is:- 17.\n",
      "\n",
      "This took 0.11318206787109375 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating The Most Popular Stations and Trip...\n",
      "\n",
      "the common start station used in city is:- Pershing Square North.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the common end station used in city is:- Pershing Square North.\n",
      "the most Combination Station used in city is:- From (E 7 St & Avenue A) To (Cooper Square & E 7 St)..\n",
      "\n",
      "This took 0.6859416961669922 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating Trip Duration...\n",
      "\n",
      "the total drive time is:- 269905248.\n",
      "the mean travel is:- 899.68416.\n",
      "\n",
      "This took 0.003000497817993164 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating User Stats...\n",
      "\n",
      "the user type in this city is:-\n",
      " Subscriber    269149\n",
      "Customer       30159\n",
      "Name: User Type, dtype: int64.\n",
      "the user type in this city is:-\n",
      " Male      204008\n",
      "Female     66783\n",
      "Name: Gender, dtype: int64.\n",
      "the earliest person born in  1885 .\n",
      "########################################\n",
      "the most recent person born in 2001.\n",
      "########################################\n",
      "in this city data of birth year not exist.\n",
      "\n",
      "This took 0.0749971866607666 seconds.\n",
      "----------------------------------------\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Input \u001b[1;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 217>\u001b[1;34m()\u001b[0m\n\u001b[0;32m    214\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m    217\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m--> 218\u001b[0m \t\u001b[43mmain\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "Input \u001b[1;32mIn [1]\u001b[0m, in \u001b[0;36mmain\u001b[1;34m()\u001b[0m\n\u001b[0;32m    208\u001b[0m trip_duration_stats(df)\n\u001b[0;32m    209\u001b[0m user_stats(df)\n\u001b[1;32m--> 210\u001b[0m \u001b[43mdisplay_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    212\u001b[0m restart \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mWould you like to restart? Enter yes or no.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m    213\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m restart\u001b[38;5;241m.\u001b[39mlower() \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124myes\u001b[39m\u001b[38;5;124m'\u001b[39m:\n",
      "Input \u001b[1;32mIn [1]\u001b[0m, in \u001b[0;36mdisplay_data\u001b[1;34m(df)\u001b[0m\n\u001b[0;32m    193\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdisplay_data\u001b[39m(df):\n\u001b[1;32m--> 194\u001b[0m         display \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mDo you like to display other data?(yes/no). \u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mlower()\n\u001b[0;32m    195\u001b[0m         \u001b[38;5;28;01mwhile\u001b[39;00m display \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myes\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m    196\u001b[0m             \u001b[38;5;28mprint\u001b[39m(df\u001b[38;5;241m.\u001b[39msample(\u001b[38;5;241m5\u001b[39m))\n",
      "File \u001b[1;32mE:\\Anaconda_files\\lib\\site-packages\\ipykernel\\kernelbase.py:1075\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1071\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_allow_stdin:\n\u001b[0;32m   1072\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(\n\u001b[0;32m   1073\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1074\u001b[0m     )\n\u001b[1;32m-> 1075\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_input_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1076\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprompt\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1077\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parent_ident\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1078\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_parent\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1079\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpassword\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[0;32m   1080\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mE:\\Anaconda_files\\lib\\site-packages\\ipykernel\\kernelbase.py:1120\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1117\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m   1118\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[0;32m   1119\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m-> 1120\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28mNone\u001b[39m\n\u001b[0;32m   1121\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[0;32m   1122\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }\n",
    "Cities = [\"chicago\", \"new york\", \"washington\"]\n",
    "Months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"all\"]\n",
    "Days = [\"saturday\", \"sunday\", \"monday\" , \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"all\"]\n",
    "\n",
    "def get_filters():\n",
    "    \"\"\"\n",
    "    Asks user to specify a city, month, and day to analyze.\n",
    "\n",
    "    Returns:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    \"\"\"\n",
    "    print('Hello! Let\\'s explore some US bikeshare data!')\n",
    "    print()\n",
    "    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "    print(\"kindly make sure to type your choice like below\")\n",
    "    print('\"chicago\", \"new york\", \"washington\"')\n",
    "    city = input(\"kindly type the name of the city, please : \").lower().strip()\n",
    "    while city in Cities:\n",
    "        print(f\" you've typed {city}\")\n",
    "        break\n",
    "    else:\n",
    "        print(\"you've typed invalid input,please choose one of this list (chicago, new york, washington) \")\n",
    "        city = input(\"kindly type the name of the city, please : \").lower().strip()\n",
    "    print('#'*40)\n",
    "    # get user input for month (all, january, february, ... , june)\n",
    "    print(\"kindly make sure to type your choice like below to avoid misstyping \")\n",
    "    print('\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"all\"')\n",
    "    month = input(\"kindly type the name of the month or all, please : \").lower().strip()\n",
    "    while month in Months:\n",
    "        print(f\"you've typed {month}\")\n",
    "        break\n",
    "    else:\n",
    "        print(\"you've typed invalid input,please choose one starting from january till june or choose all \") \n",
    "        month = input(\"kindly type the name of the month, please : \").lower().strip()\n",
    "    print('#'*40)\n",
    "    # get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "    print(\"kindly make sure to type your choice like below to avoid misstyping \")\n",
    "    print('\"saturday\", \"sunday\", \"monday\" , \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"all\"')\n",
    "    day = input(\"kindly type the name of the day or all, please : \").lower().strip()\n",
    "    while day in Days:\n",
    "        print(f\"you've typed {day}\")\n",
    "        break\n",
    "    else:\n",
    "        print(\"you've typed invalid input,please choose one starting from saturday till friday or choose all \") \n",
    "        day = input(\"kindly type the name of the day or all, please : \").lower().strip()\n",
    "    print('#'*40)   \n",
    "    print('-'*40)\n",
    "    return city, month, day\n",
    "\n",
    "def load_data(city, month, day):\n",
    "    \"\"\"\n",
    "    Loads data for the specified city and filters by month and day if applicable.\n",
    "\n",
    "    Args:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    Returns:\n",
    "        df - Pandas DataFrame containing city data filtered by month and day\n",
    "    \"\"\"\n",
    "    \n",
    "    #load data file into a dataframe as per the filter\n",
    "    df = pd.read_csv(CITY_DATA[city])\n",
    "    \n",
    "    # convert the Start Time column to datetime\n",
    "    df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "    \n",
    "    # extract month from the Start Time column to create an hour column\n",
    "    df['month'] = df['Start Time'].dt.month\n",
    "    \n",
    "    # extract day from the Start Time column to create an hour column\n",
    "    df['day'] = df['Start Time'].dt.day_name()\n",
    "    \n",
    "    if month != 'all':\n",
    "        # use the index of the months list to get the corresponding int\n",
    "        months = ['january', 'february', 'march', 'april', 'may', 'june']\n",
    "        month = months.index(month) + 1\n",
    "        # filter by month to create the new dataframe\n",
    "        df = df[df['month'] == month]\n",
    "           \n",
    "    if day != 'all':\n",
    "        # filter by day of week to create the new dataframe\n",
    "        df = df[df['day'] == day.title()]\n",
    "        \n",
    "    return df\n",
    "\n",
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # display the most common month\n",
    "    common_month = df['month'].mode()[0]\n",
    "    print(f\"the most common month is:- {common_month}\")\n",
    "    \n",
    "    # display the most common day of week\n",
    "    common_day = df['day'].mode()[0]\n",
    "    print(f\"the most common day is:- {common_day}.\".title())\n",
    "    \n",
    "    # display the most common start hour\n",
    "    df['hour'] = df['Start Time'].dt.hour\n",
    "    common_hour= df['hour'].mode()[0]\n",
    "    print(f\"the most common start hour is:- {common_hour}.\")\n",
    "    \n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "    \n",
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # display most commonly used start station\n",
    "    common_start_station = df['Start Station'].mode()[0]\n",
    "    print(f\"the common start station used in city is:- {common_start_station}.\")\n",
    "   \n",
    "    # display most commonly used end station\n",
    "    common_end_station = df['End Station'].mode()[0]\n",
    "    print(f\"the common end station used in city is:- {common_end_station}.\")\n",
    "\n",
    "    # display most frequent combination of start station and end station trip\n",
    "    df['combination_station'] = \"From (\" + df['Start Station'] + \") To (\" + df['End Station'] +\").\"\n",
    "    combination_station = df['combination_station'].mode()[0]\n",
    "    print(f\"the most Combination Station used in city is:- {combination_station}.\")\n",
    "    \n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # display total travel time\n",
    "    total_travel = df['Trip Duration'].sum()\n",
    "    print(f\"the total drive time is:- {total_travel}.\")\n",
    "    \n",
    "    # display mean travel time\n",
    "    mean_travel = df['Trip Duration'].mean()\n",
    "    print(f\"the mean travel is:- {mean_travel}.\")\n",
    "    \n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "def user_stats(df):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # Display counts of user types\n",
    "    try:\n",
    "        user_types = df['User Type'].value_counts()\n",
    "        print(f\"the user type in this city is:-\\n {user_types}.\")\n",
    "    except:\n",
    "        print(\"in this city the data of user type not exist\")\n",
    "                      \n",
    "    # Display counts of gender\n",
    "    try:\n",
    "        gender = df['Gender'].value_counts()\n",
    "        print(f\"the user type in this city is:-\\n {gender}.\")\n",
    "    except:\n",
    "        print(\"in this city the data of gender not exist\")\n",
    "\n",
    "    # Display earliest, most recent, and most common year of birth\n",
    "    try:\n",
    "        earliest = df['Birth Year'].min()\n",
    "        print(f\"the earliest person born in  {int(earliest)} .\")\n",
    "        print('#'*40)\n",
    "        most_recent = df['Birth Year'].max()\n",
    "        print(f\"the most recent person born in {int(most_recent)}.\")\n",
    "        print('#'*40)\n",
    "        most_common = df['Birth Year'].mode()[0]\n",
    "        print(f\"most common users are born in {common_year}.\")\n",
    "    except:\n",
    "        print(\"in this city data of birth year not exist.\")\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "def display_data(df):\n",
    "        display = input(\"Do you like to display other data?(yes/no). \").lower()\n",
    "        while display == \"yes\":\n",
    "            print(df.sample(5))\n",
    "            display=input(\"Do you like to pursue showing other data?(yes/no). \").lower()\n",
    "        else:\n",
    "            print(\"thank you for using bikeshare data\")\n",
    "              \n",
    "def main():\n",
    "    while True:\n",
    "        city, month, day = get_filters()\n",
    "        df = load_data(city, month, day)\n",
    "\n",
    "        time_stats(df)\n",
    "        station_stats(df)\n",
    "        trip_duration_stats(df)\n",
    "        user_stats(df)\n",
    "        display_data(df)\n",
    "\n",
    "        restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n",
    "        if restart.lower() != 'yes':\n",
    "            break\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "\tmain()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b1169db",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "612d9f09",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc0c3b69",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
